// background.js

// ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏ü‡∏¥‡∏ä‡∏ä‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ)
// ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏°‡∏≠
const knownPhishingDomains = [
  "fakebanklogin.com",
  "paypal-verify-account.net",
  "microsoft-security-alert.xyz",
  "amaz0n.co", // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á typo
  "googlesignin.info"
];

// ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
const safeDomains = [
  "google.com",
  "facebook.com",
  "microsoft.com",
  "amazon.com",
  "youtube.com",
  "wikipedia.org"
];

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏ä‡∏ä‡∏¥‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Logic ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
 * @param {string} urlString - URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏ä‡∏ä‡∏¥‡πà‡∏á, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
 */
function isPhishing(urlString) {
  try {
    const url = new URL(urlString);
    const hostname = url.hostname;

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Blacklist
    if (knownPhishingDomains.some(domain => hostname.includes(domain))) {
      console.warn(`[Phishing Detector] Blacklist match: ${hostname}`);
      return true;
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡πÄ‡∏°‡∏ô (Homoglyph / Typo squatting)
    // ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô heuristic ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Levenshtein distance
    // ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö homoglyph libraries
    const normalizedHostname = hostname.toLowerCase()
      .replace(/0/g, 'o') // 0 -> o
      .replace(/1/g, 'l') // 1 -> l
      .replace(/3/g, 'e') // 3 -> e
      .replace(/@/g, 'a'); // @ -> a

    for (const safeDomain of safeDomains) {
      const normalizedSafeDomain = safeDomain.toLowerCase()
        .replace(/0/g, 'o')
        .replace(/1/g, 'l')
        .replace(/3/g, 'e')
        .replace(/@/g, 'a');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ hostname ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Normalize ‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏î‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö safeDomain
      // ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô safeDomain ‡πÄ‡∏õ‡πä‡∏∞‡πÜ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á False Positive)
      if (normalizedHostname.includes(normalizedSafeDomain) && hostname !== safeDomain) {
        console.warn(`[Phishing Detector] Suspicious domain similarity: ${hostname} vs ${safeDomain}`);
        return true;
      }
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ IP Address ‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡πÄ‡∏°‡∏ô
    const ipRegex = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
    if (ipRegex.test(hostname)) {
      console.warn(`[Phishing Detector] IP address used in URL: ${hostname}`);
      return true;
    }

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏°‡∏µ Subdomain ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á)
    // ‡πÄ‡∏ä‡πà‡∏ô https://www.login.secure.account-update.phishing.site.com
    const parts = hostname.split('.');
    if (parts.length > 4) { // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ subdomain ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
        console.warn(`[Phishing Detector] Unusual number of subdomains: ${hostname}`);
        // return true; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    }

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ HTTP ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô HTTPS
    if (url.protocol === 'http:' && safeDomains.some(domain => hostname.endsWith(domain))) {
      console.warn(`[Phishing Detector] HTTP used for a known secure domain: ${urlString}`);
      return true;
    }

  } catch (e) {
    console.error(`[Phishing Detector] Error parsing URL: ${urlString}`, e);
    return false; // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse URL ‡πÑ‡∏î‡πâ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏ü‡∏¥‡∏ä‡∏ä‡∏¥‡πà‡∏á‡∏à‡∏≤‡∏Å Logic ‡∏ô‡∏µ‡πâ
  }
  return false; // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏ä‡∏ä‡∏¥‡πà‡∏á
}

// ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
chrome.webNavigation.onCompleted.addListener((details) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Main Frame (‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà iframe) ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ URL
  if (details.frameId === 0 && details.url) {
    const currentUrl = details.url;
    console.log(`[Phishing Detector] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL: ${currentUrl}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏ä‡∏ä‡∏¥‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isDetectedPhishing = isPhishing(currentUrl);

    if (isDetectedPhishing) {
      console.warn(`[Phishing Detector] ‡∏û‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢: ${currentUrl}`);

      // 1. ‡πÅ‡∏™‡∏î‡∏á Notification ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
      chrome.notifications.create({
        type: 'basic',
        iconUrl: 'icons/icon48.png', // ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á Extension
        title: 'Phishing Alert!',
        message: `‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ (${currentUrl}) ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á (Phishing)! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á`,
        priority: 2
      });

      // 2. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Content Script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Alert/Warning ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ URL ‡πÄ‡∏õ‡πá‡∏ô HTTP(S) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö chrome:// ‡∏´‡∏£‡∏∑‡∏≠ file://
      if (currentUrl.startsWith('http://') || currentUrl.startsWith('https://')) {
          chrome.scripting.executeScript({
            target: { tabId: details.tabId },
            function: displayInPageWarning,
            args: [currentUrl]
          }).then(() => console.log('In-page warning script executed.')).catch(error => console.error('Failed to execute in-page warning script:', error));
      }
    } else {
      console.log(`[Phishing Detector] URL ‡∏î‡∏π‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ${currentUrl}`);
    }
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏â‡∏µ‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏î‡∏¢ chrome.scripting.executeScript
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
function displayInPageWarning(url) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  if (document.getElementById('phishing-detector-warning-bar')) {
    return;
  }

  const warningBar = document.createElement('div');
  warningBar.id = 'phishing-detector-warning-bar';
  warningBar.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background-color: #dc3545; /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á */
    color: white;
    text-align: center;
    padding: 15px;
    z-index: 2147483647; /* ‡∏Ñ‡πà‡∏≤ z-index ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á */
    font-family: 'Inter', sans-serif;
    font-size: 16px;
    font-weight: bold;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  `;
  warningBar.innerHTML = `
    <span>üö® ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ (${url}) ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á (Phishing)! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á üö®</span>
    <button style="
      background: none;
      border: none;
      color: white;
      font-size: 20px;
      cursor: pointer;
      margin-left: 15px;
    " onclick="this.parentNode.remove()">√ó</button>
  `;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á body
  document.body.prepend(warningBar);
}

// Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å popup.js (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ popup ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö URL ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "checkCurrentUrl") {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      if (tabs[0] && tabs[0].url) {
        const currentUrl = tabs[0].url;
        const isDetected = isPhishing(currentUrl);
        sendResponse({ url: currentUrl, isPhishing: isDetected });
      } else {
        sendResponse({ url: "‡πÑ‡∏°‡πà‡∏°‡∏µ URL", isPhishing: false });
      }
    });
    // ‡∏ï‡πâ‡∏≠‡∏á return true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤ sendResponse ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö asynchronous
    return true;
  }
});
